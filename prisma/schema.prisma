// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@index([id])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([id])
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    bio           String?
    accounts      Account[]
    sessions      Session[]
    blogs         Blog[]
    comments      Comment[]   @relation(name: "comment")
    liked         Comment[]   @relation(name: "like")
    reactions     Reaction[]
    subscribers   Subscribe[] @relation(name: "follower")
    subscribes    Subscribe[] @relation(name: "follow")
    saved         Blog[]      @relation(name: "save")

    @@index([id])
    @@fulltext([name])
}

model Subscribe {
    id          String @id @default(cuid())
    follower    User   @relation(name: "follower", fields: [follower_id], references: [id])
    follow      User   @relation(name: "follow", fields: [follow_id], references: [id])
    follower_id String
    follow_id   String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@id([identifier, token])
    @@unique([identifier, token])
}

model Blog {
    id           String     @id @default(cuid())
    cover_image  Image      @relation(fields: [image_id], references: [id])
    title        String
    content      String     @db.Text
    tags         String
    author_id    String
    author       User       @relation(fields: [author_id], references: [id], onDelete: Cascade)
    is_published Boolean    @default(false)
    publishedAt  DateTime?
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    image_id     String
    reactions    Reaction[]
    savers       User[]     @relation(name: "save")

    @@index([id])
    @@fulltext([title])
}

model Comment {
    id        String @id @default(cuid())
    content   String @db.Text
    author_id String
    author    User   @relation(name: "comment", fields: [author_id], references: [id], onDelete: Cascade)
    likes     User[] @relation(name: "like")

    @@index([id])
}

model Image {
    id         String  @id @default(cuid())
    secure_url String
    name       String
    alt        String?
    blogs       Blog[]

    @@index([id])
}

model Reaction {
    id     String @id @default(cuid())
    name   String
    author User   @relation(fields: [userId], references: [id])
    blog   Blog   @relation(fields: [blogId], references: [id])
    userId String
    blogId String

    @@index([id])
}
